apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
    if (isAndroidModule(project)) setupProjectReport()
    else setupKotlinReport()
}

def setupKotlinReport() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupProjectReport() {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
    }

    task jacocoTestReport(
            type: JacocoReport,
            dependsOn: ['testDevDebugUnitTest']
    ) {
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }

        def fileFilter = [
                '**/*App.*',
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/di/**'
        ]
        def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/devDebug",
                excludes: fileFilter
        )
        def mainSrc = "$projectDir/src/main/java"

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])

        executionData.from = fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDevDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*.ec'
                ]
        )
    }
}